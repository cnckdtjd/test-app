<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jacob.productservice.mapper.ProductMapper">
    <resultMap id="productResultMap" type="com.jacob.productservice.dto.ProductDto">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="price" column="price"/>
        <result property="stock" column="stock"/>
        <result property="category" column="category"/>
        <result property="imageUrl" column="image_url"/>
        <result property="version" column="version"/>
    </resultMap>
    
    <select id="findAll" resultMap="productResultMap">
        SELECT id, name, description, price, stock, category, image_url, version
        FROM products
        ORDER BY id DESC
    </select>
    
    <select id="findById" resultMap="productResultMap" parameterType="long">
        SELECT id, name, description, price, stock, category, image_url, version
        FROM products
        WHERE id = #{id}
    </select>
    
    <select id="findByCategory" resultMap="productResultMap" parameterType="string">
        SELECT id, name, description, price, stock, category, image_url, version
        FROM products
        WHERE category = #{category}
        ORDER BY id DESC
    </select>
    
    <insert id="save" parameterType="com.jacob.productservice.dto.ProductDto" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO products (name, description, price, stock, category, image_url)
        VALUES (#{name}, #{description}, #{price}, #{stock}, #{category}, #{imageUrl})
    </insert>
    
    <update id="update" parameterType="com.jacob.productservice.dto.ProductDto">
        UPDATE products
        SET name = #{name},
            description = #{description},
            price = #{price},
            stock = #{stock},
            category = #{category},
            image_url = #{imageUrl},
            version = version + 1
        WHERE id = #{id} AND version = #{version}
    </update>
    
    <update id="updateStock">
        UPDATE products
        SET stock = stock - #{quantity},
            version = version + 1
        WHERE id = #{productId} AND stock >= #{quantity} AND version = #{version}
    </update>
    
    <delete id="delete" parameterType="long">
        DELETE FROM products
        WHERE id = #{id}
    </delete>
</mapper> 