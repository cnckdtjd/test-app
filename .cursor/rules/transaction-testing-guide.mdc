---
description: 
globs: 
alwaysApply: false
---
# 트랜잭션 테스트 및 부하 분산 가이드

## JMeter 부하테스트 전략
- 모든 트랜잭션 로직은 JMeter를 통한 부하테스트가 가능해야 합니다.
- 테스트 환경은 실제 프로덕션 환경과 최대한 유사하게 구성해야 합니다.

## 트랜잭션 복잡성 요구사항
1. **동시성 처리**
   - 여러 사용자가 동시에 같은 장바구니/상품에 접근하는 상황을 처리해야 합니다.
   - 데드락 방지 전략이 구현되어야 합니다.

2. **분산 트랜잭션**
   - 장바구니-상품-결제 간 분산 트랜잭션 처리 로직이 필요합니다.
   - SAGA 패턴이나 2PC(Two-Phase Commit) 패턴 구현을 고려해야 합니다.

3. **롤백 및 보상 트랜잭션**
   - 모든 트랜잭션은 오류 발생 시 안전하게 롤백되어야 합니다.
   - 분산 환경에서는 보상 트랜잭션(Compensating Transaction)이 구현되어야 합니다.

## 테스트 시나리오
1. **경쟁 조건 테스트**
   - 동일한 상품에 대한 동시 접근 테스트
   - 재고 한계에 가까운 상황에서의 주문 테스트

2. **시스템 부하 테스트**
   - 대량의 장바구니 조회/추가/삭제 요청 처리
   - 낮은 지연시간 유지 확인

3. **실패 복구 테스트**
   - 서비스 장애 상황에서의 복구 테스트
   - 네트워크 지연/단절 상황 시뮬레이션

## 개발자 지침
- 모든 트랜잭션 로직은 격리 수준(Isolation Level)을 명시적으로 지정해야 합니다.
- 트랜잭션 경계는 최대한 작게 유지하여 성능을 최적화해야 합니다.
- 모든 트랜잭션 관련 로그는 상세하게 기록되어야 합니다.

## 모니터링 및 분석
- 모든 트랜잭션은 고유 ID로 추적 가능해야 합니다.
- 성능 지표(처리량, 응답 시간, 오류율)는 실시간으로 모니터링되어야 합니다.
- 병목 현상 식별을 위한 프로파일링 도구를 활용해야 합니다.
