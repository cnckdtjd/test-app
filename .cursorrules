1. 아키텍처 및 설계 규칙

    모놀리식(Monolith) 구조
        MVP 단계에서는 모놀리식 구조를 유지하되, Controller-Service-Repository 계층을 명확히 구분한다.
        추후 MSA로 전환하기 쉽도록, 각 도메인(회원, 상품, 장바구니, 주문 등)을 내부 모듈 수준에서라도 분리해둔다.

    RESTful API 설계 지침
        URI는 리소스(Resource) 중심으로 간결하게 작성:
        GET /products, POST /products, PATCH /products/{id}, DELETE /products/{id} 등.
        HTTP Method에 따른 역할 준수: GET(조회), POST(생성), PUT/PATCH(수정), DELETE(삭제).
        에러 처리: 응답 코드 사용(예: 4xx, 5xx), 에러 메시지/에러 코드를 JSON 바디로 명확히 전달.
        버전 관리(필요 시): v1, v2 등 버전을 URI 혹은 헤더에 명시.

    트랜잭션(동시성) 처리
        JPA 사용 시, Service 단에서 트랜잭션을 적용하고, Repository 에서는 DB 접근 로직만 담당.
        동시에 수정/삭제가 빈번한 리소스에는 Optimistic Lock(또는 Pessimistic Lock) 적용을 검토.
        재고/수량과 같은 민감한 필드는 동시성 제어를 우선 고려(낙관적 락 or 별도 DB 칼럼 통한 버전 관리 등).

    네이밍 규칙=
        패키지 구조: com.company.project.domain, com.company.project.service, com.company.project.repository, com.company.project.controller 등.
        클래스명: 역할을 명확히(예: UserService, ProductController, OrderRepository).
        메서드명: 동사+목적어 사용(예: findAllProducts, createOrder).
        URL 경로: 복수형으로 사용(예: /users, /products, /orders).
        DB 테이블 컬럼명: 소문자+스네이크 케이스(user_id, product_name 등).

2. 코드 및 품질 관리 규칙
    코딩 컨벤션

        기본적으로 Google Java Style 혹은 Spring Official Style을 준수(팀별 선호도에 따라 결정).
        Lombok 사용 시, @Getter, @Setter, @Builder 등을 상황에 맞게 사용하되, 무분별한 @Data 사용은 지양.
        Spring Validation: DTO 단에서 @NotNull, @Size, @Email 등 적용하여 유효성 검사.
    
    테스트 코드
        단위 테스트(Unit Test): 주요 서비스 로직에 대해 JUnit + Mockito 사용.
        통합 테스트(Integration Test): Spring Boot Test를 통해 Controller-Repository 흐름을 검증.
        성능/부하 테스트: Apache JMeter 스크립트는 별도의 폴더에서 버전 관리.

    Exception 처리
        Custom Exception을 만들어 활용하거나, Spring의 @ControllerAdvice를 사용하여 전역 예외 처리.
        응답 바디(에러 코드, 메시지)를 일관성 있게 정의.

    로깅(Logging) 규칙
        로그 포맷: [시간][레벨][클래스명][메시지] 형태 권장.
        민감 정보(비밀번호, 개인 식별 정보)는 로그에 출력하지 않음.
        레벨: DEBUG(개발 디버깅), INFO(일반 로그), WARN(주의 필요), ERROR(오류 발생 시).
        운영 배포 시 INFO 이상만 출력하도록 조정.

    코드 리뷰
        Pull Request(또는 Merge Request) 기반으로 최소 1인 이상 리뷰 후 머지.
        리뷰 시, 문서화가 잘 되어 있는지, 예외 처리는 적절한지, 비즈니스 로직이 분리되어 있는지 등을 확인.

3. 보안 및 인증 규칙
    Spring Security
        세션 기반 인증(초기), 혹은 JWT 기반 인증(추후 필요 시).
        비밀번호는 BCrypt(또는 Argon2) 등 안전한 해시 알고리즘으로 저장.
        로그인 실패 회수 관리, 계정 잠금 시나리오 등은 부하 테스트 시나리오 요구에 따라 옵션 적용.

    민감 정보 관리
        DB 접속 정보, API 키 등은 소스 코드에 하드코딩하지 말고, application.yml(또는 .properties) 외부 설정, Vault(또는 Kubernetes Secret) 등 안전한 방식으로 관리.
        로깅 시 비밀번호나 개인정보 필드를 절대 출력하지 않는다.

    SSL/TLS
        내부 테스트 환경에서 HTTPS는 선택적일 수 있으나, 실제 운영 단계 혹은 대외 테스트 시에는 HTTPS 적용.
        키스토어/인증서 관리 시 접근 권한 최소화.

    관리자 접근
        관리자 UI/API는 별도의 Role(ROLE_ADMIN)로 제한.
        관리자 기능(롤백/복구 등)은 매우 중요하므로, 2FA 등 이중 인증 도입을 검토해볼 수 있음(추후).

4. 데이터베이스 규칙
    스키마 정의
        테이블 생성 시 PK, FK, Index 등 명확히 설계.
        대량 데이터(상품, 사용자) 시, 조회 성능을 고려한 인덱스 구성.
        BigInt, Varchar 길이, Date/Datetime 등 타입 선정 시 실제 데이터 범위 검토.

    마이그레이션 도구
        Liquibase 또는 Flyway 같은 DB 스키마 버전 관리 도구 사용 권장.
        로컬/테스트/운영 환경별 DB 변경 이력을 표준화된 방식으로 추적.

    트랜잭션 및 락
        주문, 재고 차감 등 Critical 트랜잭션에서 레이스 컨디션이 없는지 확인.
        JPA의 @Transactional 범위에 유의하고, 불필요하게 오래 잡고 있지 않도록 주의.

    백업/롤백 정책
        부하 테스트 후 데이터 초기화를 위해 별도 스크립트(SQL/파이썬) 혹은 DB 백업/Restore를 자동화한다.
        (필요 시) 시점 복구(Point in Time Recovery) 같은 고급 기능을 활용.

5. 프로젝트 폴더구조

src/main/java/com/jacob/testapp/
├── admin/
│   └── controller/
│   │    └── AdminController.java
│   └── service/
├── cart/
│   ├── controller/
│   │   └── CartController.java
│   ├── entity/
│   │   ├── Cart.java
│   │   └── CartItem.java
│   ├── repository/
│   │   ├── CartItemRepository.java
│   │   └── CartRepository.java
│   └── service/
│       └── CartService.java
├── common/
│   └── controller/
│       └── HomeController.java
├── order/
│   ├── controller/
│   │   └── OrderController.java
│   ├── entity/
│   │   ├── Order.java
│   │   └── OrderItem.java
│   ├── repository/
│   │   ├── OrderItemRepository.java
│   │   └── OrderRepository.java
│   └── service/
│       └── OrderService.java
├── product/
│   ├── controller/
│   │   └── ProductController.java
│   ├── entity/
│   │   └── Product.java
│   ├── repository/
│   │   └── ProductRepository.java
│   └── service/
│       └── ProductService.java
└── user/
    ├── controller/
    │   └── UserController.java
    ├── entity/
    │   └── User.java
    ├── repository/
    │   └── UserRepository.java
    └── service/
        └── UserService.java

6. 도메인 기반으로 정리된 구조 설명:
공통 도메인 (common)
HomeController: 메인 페이지, 로그인, 회원가입 등 공통 기능 처리
주요 기능: 메인 페이지 라우팅, 로그인/로그아웃 처리, 권한 기반 리다이렉션
관리자 도메인 (admin)
AdminController: 관리자 전용 기능 처리
주요 기능:
대시보드 관리 (사용자/상품/주문 통계)
사용자 관리 (계정 잠금/해제)
상품 관리 (CRUD)
주문 관리 (상태 변경)
테스트 데이터 생성/롤백
사용자 도메인 (user)
엔티티: User
레포지토리: UserRepository
서비스: UserService
컨트롤러: UserController
주요 기능: 회원가입, 프로필 관리, 계정 관리
상품 도메인 (product)
엔티티: Product
레포지토리: ProductRepository
서비스: ProductService
컨트롤러: ProductController
주요 기능: 상품 목록 조회, 상품 상세 조회, 재고 관리
장바구니 도메인 (cart)
엔티티: Cart, CartItem
레포지토리: CartRepository, CartItemRepository
서비스: CartService
컨트롤러: CartController
주요 기능: 장바구니 관리, 상품 추가/제거, 수량 변경
주문 도메인 (order)
엔티티: Order, OrderItem
레포지토리: OrderRepository, OrderItemRepository
서비스: OrderService
컨트롤러: OrderController
주요 기능: 주문 처리, 주문 상태 관리, 주문 이력 조회
; 6. 성능/부하 테스트 및 모니터링 규칙
; 부하 테스트 시나리오

; login → 상품 조회 → 장바구니 추가 → 주문 → 로그아웃 기본 플로우를 JMeter 스크립트로 작성.
; 동시 접속 3,000 → 5,000 → 10,000명 증가 시나리오별로 압력(Throughput) 테스트.
; 모니터링

; 자원(CPU, 메모리, GC) 사용량 확인: 시스템 모니터링 (Prometheus/Grafana, cadvisor 등).
; 애플리케이션 성능(APM) 지표 수집: Spring Actuator (또는 Pinpoint, New Relic 등).
; 지표 및 보고

; 응답 시간(평균, 최소, 최대), 에러율, TPS(초당 트랜잭션), DB 쿼리 부하량 등을 수집.
; 병목 구간(예: 특정 쿼리, 캐시 미스, 스레드 풀 부족) 발견 시 즉시 공유.
; 최적화 규칙

; 인덱스 튜닝: 접근이 잦은 컬럼에는 인덱스 설정 검토.
; 쿼리 최적화: N+1 쿼리 방지, fetch join 사용 등.
; 커넥션 풀: HikariCP 설정(최대 커넥션 수, Time-out) 점검.
; 캐싱 전략: 인기 상품 조회 등은 Redis와 같은 In-memory 캐시 고려(추후 도입).